[{"D:\\ws\\calculatorCE\\calc_ce\\src\\reportWebVitals.js":"1","D:\\ws\\calculatorCE\\calc_ce\\src\\App.js":"2","D:\\ws\\calculatorCE\\calc_ce\\src\\index.js":"3","D:\\ws\\calculatorCE\\calc_ce\\src\\components\\calculator\\Calculator.js":"4"},{"size":362,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":3884,"mtime":1606390536293,"results":"7","hashOfConfig":"6"},{"size":511,"mtime":1606390187088,"results":"8","hashOfConfig":"6"},{"size":10945,"mtime":1606387652424,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k6xwq6",{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"D:\\ws\\calculatorCE\\calc_ce\\src\\reportWebVitals.js",[],"D:\\ws\\calculatorCE\\calc_ce\\src\\App.js",["19","20","21"],"D:\\ws\\calculatorCE\\calc_ce\\src\\index.js",[],"D:\\ws\\calculatorCE\\calc_ce\\src\\components\\calculator\\Calculator.js",["22","23","24"],"import React, { Component } from 'react';\r\n\r\nclass Calculator extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            display: \"0\",\r\n            previousExpression: \"0\",\r\n            calculateButtonPressed: \"false\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    getButton(element) {\r\n        return (\r\n            <button onClick={() => this.handleNumberClick({ element })}>{element}</button>\r\n        );\r\n    }\r\n\r\n    handleNumberClick(value) {\r\n        if (this.state.display === \"0\" || this.state.calculateButtonPressed === \"true\") {\r\n            this.setState({ display: value, calculateButtonPressed: \"false\", previousExpression: \"0\" });\r\n        } else {\r\n            this.setState({ display: this.state.display.toString().concat(value) });\r\n        }\r\n    }\r\n\r\n    handleOperatorClick(value) {\r\n        if (value === \"x\") {\r\n            value = \"*\";\r\n        }\r\n        if (this.state.display === \"0\" && (value === \"(\")) {\r\n            this.setState({ display: value, calculateButtonPressed: \"false\" });\r\n            return;\r\n        } else if (this.state.display === \"0\" && (value === \")\")) {\r\n            return;\r\n        } else if (this.state.calculateButtonPressed === \"true\" && value === \".\") {\r\n            if (this.state.display.toString().indexOf(\".\") > -1) {\r\n                return;\r\n            }\r\n        } else if (value === \".\" && this.state.display.toString().charAt(this.state.display.length-1) == \".\") {\r\n            return;\r\n        }\r\n\r\n        this.setState({ display: this.state.display.toString().concat(value), calculateButtonPressed: \"false\", previousExpression: \"0\" });\r\n    }\r\n\r\n    clear() {\r\n        this.setState(() => ({\r\n            display: \"0\", calculateButtonPressed: \"false\"\r\n        }));\r\n    }\r\n\r\n    isValidExpression(expression) {\r\n        try {\r\n            eval(expression);\r\n            return true;\r\n        } catch (exception) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    showErrorAndReset(msg) {\r\n        this.setState({ display: \"0\", calculateButtonPressed: \"false\" });\r\n        alert(\"error: \" + msg);\r\n    }\r\n\r\n    calculate() {\r\n\r\n        if (this.isValidExpression(this.state.display)) {\r\n            var result = eval(this.state.display);\r\n            if (result.toString().indexOf(\"Infinity\") > -1) {\r\n                this.showErrorAndReset(\"Division by zero\");\r\n            } else {\r\n                this.setState({ display: result, calculateButtonPressed: \"true\", previousExpression: this.state.display });\r\n            }\r\n        } else {\r\n            this.showErrorAndReset(\"Expression is not valid\");\r\n        }\r\n\r\n    }\r\n\r\n    getCalculatorUIBootstrap() {\r\n        return (\r\n            <div className=\"container calculator-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"calculation-previous-expression\" colSpan=\"4\">{this.state.previousExpression}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"calculation-result\" colSpan=\"4\">{this.state.display}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row calc-row-margin-top\">\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('7')}>7</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('8')}>8</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('9')}>9</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-primary\" onClick={() => this.handleOperatorClick('+')}>+</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row calc-row-margin-top\">\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('4')}>4</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('5')}>5</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('6')}>6</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-primary\" onClick={() => this.handleOperatorClick('-')}>-</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row calc-row-margin-top\">\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('1')}>1</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('2')}>2</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('3')}>3</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-primary\" onClick={() => this.handleOperatorClick('x')}>x</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row calc-row-margin-top\">\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleOperatorClick('(')}>(</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleNumberClick('0')}>0</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-secondary\" onClick={() => this.handleOperatorClick(')')}>)</button>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-primary\" onClick={() => this.handleOperatorClick('/')}>/</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row calc-row-margin-top\">\r\n                    <div className=\"col-4\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-warning\" onClick={() => this.clear()}>CE</button>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-primary\" onClick={() => this.handleOperatorClick('.')}>.</button>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <button type=\"button\" className=\"btn btn-block btn-outline-primary\" onClick={() => this.calculate()}>=</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    getCalculatorHTML() {\r\n        return (\r\n            <div>\r\n                <table className=\"calculator-body\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"calculation-previous-expression\" colSpan=\"4\">{this.state.previousExpression}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"calculation-result\" colSpan=\"4\">{this.state.display}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><button onClick={() => this.handleNumberClick('7')}>7</button></td>\r\n                            <td><button onClick={() => this.handleNumberClick('8')}>8</button></td>\r\n                            <td><button onClick={() => this.handleNumberClick('9')}>9</button></td>\r\n                            <td><button onClick={() => this.handleOperatorClick('+')}>+</button></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><button onClick={() => this.handleNumberClick('4')}>4</button></td>\r\n                            <td><button onClick={() => this.handleNumberClick('5')}>5</button></td>\r\n                            <td><button onClick={() => this.handleNumberClick('6')}>6</button></td>\r\n                            <td><button onClick={() => this.handleOperatorClick('-')}>-</button></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><button onClick={() => this.handleNumberClick('1')}>1</button></td>\r\n                            <td><button onClick={() => this.handleNumberClick('2')}>2</button></td>\r\n                            <td><button onClick={() => this.handleNumberClick('3')}>3</button></td>\r\n                            <td><button onClick={() => this.handleOperatorClick('x')}>x</button></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td><button onClick={() => this.handleOperatorClick('(')}>(</button></td>\r\n                            <td><button onClick={() => this.handleNumberClick('0')}>0</button></td>\r\n                            <td><button onClick={() => this.handleOperatorClick(')')}>)</button></td>\r\n                            <td><button onClick={() => this.handleOperatorClick('/')}>/</button></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td colSpan=\"1\"><button onClick={() => this.clear()}>CE</button></td>\r\n                            <td colSpan=\"1\"><button onClick={() => this.handleOperatorClick('.')}>.</button></td>\r\n                            <td colSpan=\"2\"><button onClick={() => this.calculate()}>=</button></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.getCalculatorUIBootstrap()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;",{"ruleId":"25","severity":1,"message":"26","line":3,"column":8,"nodeType":"27","messageId":"28","endLine":3,"endColumn":12},{"ruleId":"29","severity":1,"message":"30","line":21,"column":15,"nodeType":"31","endLine":21,"endColumn":78},{"ruleId":"29","severity":1,"message":"30","line":76,"column":15,"nodeType":"31","endLine":76,"endColumn":27},{"ruleId":"32","severity":1,"message":"33","line":47,"column":103,"nodeType":"34","messageId":"35","endLine":47,"endColumn":105},{"ruleId":"36","severity":1,"message":"37","line":62,"column":13,"nodeType":"38","messageId":"35","endLine":62,"endColumn":17},{"ruleId":"36","severity":1,"message":"37","line":77,"column":26,"nodeType":"38","messageId":"35","endLine":77,"endColumn":30},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-eval","eval can be harmful.","CallExpression"]